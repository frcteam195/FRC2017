/*
 * AutoHopperRed.h
 *
 *  Created on: Mar 14, 2017
 *      Author: roberthilton
 */

#ifndef SRC_AUTONOMOUS_AUTOHOPPERRED_H_
#define SRC_AUTONOMOUS_AUTOHOPPERRED_H_

#include <Utilities/CustomAction.h>
#include <Actions/VisionTurretControlAction.h>
#include <Subsystems/DriveBaseSubsystem.h>
#include <Subsystems/ShooterSubsystem.h>
#include <Subsystems/TurretSubsystem.h>
#include <Subsystems/BallFeederSubsystem.h>
#include <Subsystems/IntakeSubsystem.h>

#define AUTO_HOPPER_RED_TARGETING_TIMEOUT_MS 500

class AutoHopperRed: public CustomAction {
public:
	AutoHopperRed(Controllers *robotControllers, vector<CustomSubsystem*> *subsystemVector)
	:CustomAction(robotControllers, subsystemVector){
		ds = &DriverStation::GetInstance();
		driveBaseSubsystem = dynamic_cast<DriveBaseSubsystem*>(subsystemVector->at(robotControllers->getDriveSubsystemIndex()));
		shooterSubsystem = dynamic_cast<ShooterSubsystem*>(subsystemVector->at(robotControllers->getShooterSubsystemIndex()));
		turretSubsystem = dynamic_cast<TurretSubsystem*>(subsystemVector->at(robotControllers->getTurretSubsystemIndex()));
		ballFeederSubsystem = dynamic_cast<BallFeederSubsystem*>(subsystemVector->at(robotControllers->getFeederSubsystemIndex()));
		intakeSubsystem = dynamic_cast<IntakeSubsystem*>(subsystemVector->at(robotControllers->getIntakeSubsystemIndex()));
		visionTurretControlAction = new VisionTurretControlAction(robotControllers, subsystemVector);
	}
	~AutoHopperRed() {}

	void start() override {
		this_thread::sleep_for(chrono::milliseconds(250));
		driveBaseSubsystem->setGear(false);
		intakeSubsystem->setIntakePosition(true);
		turretSubsystem->selectShot(ShotSelection::hopper);
		//driveBaseSubsystem->changeControlMode(CANSpeedController::kMotionProfile);
		//driveBaseSubsystem->processMotionProfile(getVectorFromLeftProfile(), getVectorFromRightProfile());
		shooterSubsystem->selectShot(ShotSelection::hopper);

		double avgPosTmp = 0;


		driveBaseSubsystem->setDriveSpeed(1, -1);

		do {
			avgPosTmp = driveBaseSubsystem->getAveragePosition();
			this_thread::sleep_for(chrono::milliseconds(10));
		} while (avgPosTmp < 35 && ds->IsAutonomous());

		driveBaseSubsystem->setDriveSpeed(0.75, 0.75);

		avgPosTmp = 0;

		do {
			avgPosTmp = abs(robotControllers->getNavX()->GetYaw());
			this_thread::sleep_for(chrono::milliseconds(10));
		} while (avgPosTmp < TURN_ANGLE_ONE_RED && ds->IsAutonomous());
		driveBaseSubsystem->setDriveSpeed(0, 0);
		this_thread::sleep_for(chrono::milliseconds(100));
		driveBaseSubsystem->setPosition(0);
		this_thread::sleep_for(chrono::milliseconds(30));

		driveBaseSubsystem->setDriveSpeed(1, -1);

		avgPosTmp = 0;

		do {
			avgPosTmp = driveBaseSubsystem->getAveragePosition();
			cout << "average pos: " << avgPosTmp << endl;
			this_thread::sleep_for(chrono::milliseconds(10));
		} while (avgPosTmp < 14 && ds->IsAutonomous());

		driveBaseSubsystem->setDriveSpeed(0, 0);
		visionTurretControlAction->start();
		timeoutStart = Timer::GetFPGATimestamp();
		while (!visionTurretControlAction->isOnTarget() && timeoutElapsedTimeMS < AUTO_HOPPER_RED_TARGETING_TIMEOUT_MS) {
			this_thread::sleep_for(chrono::milliseconds(25));
			timeoutEnd = Timer::GetFPGATimestamp();
			timeoutElapsedTimeMS = (int)((timeoutEnd - timeoutStart) * 1000);
		}
		visionTurretControlAction->stop();
		//delete visionTurretControlAction;
		//visionTurretControlAction = nullptr;

		timeoutStart = Timer::GetFPGATimestamp();
		while (ds->IsAutonomous()&&ds->IsEnabled()) {
			ballFeederSubsystem->setFeederOn();
			timeoutEnd = Timer::GetFPGATimestamp();
			if ((timeoutEnd - timeoutStart) > 3) {
				timeoutStart = Timer::GetFPGATimestamp();
				intakeSubsystem->setIntakePosition(false);
				this_thread::sleep_for(chrono::milliseconds(350));
				intakeSubsystem->setIntakePosition(true);
			}
		}
		ballFeederSubsystem->setFeederOff();

	};

	void stop() override {

	};

protected:
	void run() override {};

private:
	DriverStation *ds;

	DriveBaseSubsystem *driveBaseSubsystem;
	ShooterSubsystem *shooterSubsystem;
	TurretSubsystem *turretSubsystem;
	BallFeederSubsystem *ballFeederSubsystem;
	IntakeSubsystem *intakeSubsystem;

	VisionTurretControlAction *visionTurretControlAction;

	const int kMotionProfileSzLeft =156;

	const double kMotionProfileLeft[156][3] = {
	{0,	0	,10},
	{0.0116666666666667,	140	,10},
	{0.0525,	350	,10},
	{0.128333333333333,	560	,10},
	{0.239166666666667,	770	,10},
	{0.385,	980	,10},
	{0.565833333333333,	1190	,10},
	{0.781666666666667,	1400	,10},
	{1.0325,	1610	,10},
	{1.31833333333333,	1820	,10},
	{1.63916666666667,	2030	,10},
	{1.98333333333333,	2100	,10},
	{2.33333333333333,	2100	,10},
	{2.68333333333333,	2100	,10},
	{3.03333333333333,	2100	,10},
	{3.38333333333333,	2100	,10},
	{3.73333333333333,	2100	,10},
	{4.08333333333333,	2100	,10},
	{4.43333333333333,	2100	,10},
	{4.78333333333333,	2100	,10},
	{5.13333333333333,	2100	,10},
	{5.48333333333333,	2100	,10},
	{5.83333333333333,	2100	,10},
	{6.18333333333333,	2100	,10},
	{6.53333333333333,	2100	,10},
	{6.88333333333333,	2100	,10},
	{7.23333333333333,	2100	,10},
	{7.58333333333333,	2100	,10},
	{7.93333333333333,	2100	,10},
	{8.28333333333333,	2100	,10},
	{8.63333333333333,	2100	,10},
	{8.98333333333333,	2100	,10},
	{9.33333333333333,	2100	,10},
	{9.68333333333333,	2100	,10},
	{10.0333333333333,	2100	,10},
	{10.3833333333333,	2100	,10},
	{10.7333333333333,	2100	,10},
	{11.0833333333333,	2100	,10},
	{11.4333333333333,	2100	,10},
	{11.7833333333333,	2100	,10},
	{12.1333333333333,	2100	,10},
	{12.4833333333333,	2100	,10},
	{12.8333333333333,	2100	,10},
	{13.1833333333333,	2100	,10},
	{13.5333333333333,	2100	,10},
	{13.8833333333333,	2100	,10},
	{14.2333333333333,	2100	,10},
	{14.5833333333333,	2100	,10},
	{14.9333333333333,	2100	,10},
	{15.2833333333333,	2100	,10},
	{15.6333333333333,	2100	,10},
	{15.9833333333333,	2100	,10},
	{16.3333333333333,	2100	,10},
	{16.6833333333333,	2100	,10},
	{17.0333333333333,	2100	,10},
	{17.3833333333333,	2100	,10},
	{17.7333333333333,	2100	,10},
	{18.0833333333333,	2100	,10},
	{18.4333333333333,	2100	,10},
	{18.7833333333333,	2100	,10},
	{19.1333333333333,	2100	,10},
	{19.4833333333333,	2100	,10},
	{19.8333333333333,	2100	,10},
	{20.1833333333333,	2100	,10},
	{20.5333333333333,	2100	,10},
	{20.8833333333333,	2100	,10},
	{21.2333333333333,	2100	,10},
	{21.5833333333333,	2100	,10},
	{21.9333333333333,	2100	,10},
	{22.2833333333333,	2100	,10},
	{22.6333333333333,	2100	,10},
	{22.9833333333333,	2100	,10},
	{23.3333333333333,	2100	,10},
	{23.6833333333334,	2100	,10},
	{24.0333333333334,	2100	,10},
	{24.3833333333334,	2100	,10},
	{24.7333333333334,	2100	,10},
	{25.0833333333334,	2100	,10},
	{25.4333333333334,	2100	,10},
	{25.7833333333334,	2100	,10},
	{26.1333333333334,	2100	,10},
	{26.4833333333334,	2100	,10},
	{26.8333333333334,	2100	,10},
	{27.1833333333334,	2100	,10},
	{27.5333333333334,	2100	,10},
	{27.8833333333334,	2100	,10},
	{28.2333333333334,	2100	,10},
	{28.5833333333334,	2100	,10},
	{28.9333333333334,	2100	,10},
	{29.2833333333334,	2100	,10},
	{29.6333333333334,	2100	,10},
	{29.9833333333334,	2100	,10},
	{30.3333333333334,	2100	,10},
	{30.6833333333334,	2100	,10},
	{31.0333333333334,	2100	,10},
	{31.3833333333334,	2100	,10},
	{31.7333333333334,	2100	,10},
	{32.0833333333334,	2100	,10},
	{32.4333333333334,	2100	,10},
	{32.7833333333334,	2100	,10},
	{33.1333333333334,	2100	,10},
	{33.4833333333334,	2100	,10},
	{33.8333333333334,	2100	,10},
	{34.1833333333334,	2100	,10},
	{34.5333333333334,	2100	,10},
	{34.8833333333334,	2100	,10},
	{35.2333333333334,	2100	,10},
	{35.5833333333334,	2100	,10},
	{35.9333333333334,	2100	,10},
	{36.2833333333334,	2100	,10},
	{36.6333333333334,	2100	,10},
	{36.9833333333334,	2100	,10},
	{37.3333333333334,	2100	,10},
	{37.6833333333334,	2100	,10},
	{38.0333333333334,	2100	,10},
	{38.3833333333334,	2100	,10},
	{38.7333333333334,	2100	,10},
	{39.0833333333334,	2100	,10},
	{39.4333333333334,	2100	,10},
	{39.7833333333334,	2100	,10},
	{40.1333333333334,	2100	,10},
	{40.4833333333334,	2100	,10},
	{40.8333333333334,	2100	,10},
	{41.1833333333334,	2100	,10},
	{41.5333333333334,	2100	,10},
	{41.8833333333334,	2100	,10},
	{42.2333333333334,	2100	,10},
	{42.5833333333334,	2100	,10},
	{42.9333333333334,	2100	,10},
	{43.2833333333334,	2100	,10},
	{43.6333333333334,	2100	,10},
	{43.9833333333334,	2100	,10},
	{44.3333333333334,	2100	,10},
	{44.6833333333334,	2100	,10},
	{45.0333333333334,	2100	,10},
	{45.3833333333334,	2100	,10},
	{45.7333333333334,	2100	,10},
	{46.0833333333334,	2100	,10},
	{46.4333333333334,	2100	,10},
	{46.7833333333334,	2100	,10},
	{47.1333333333334,	2100	,10},
	{47.4833333333334,	2100	,10},
	{47.8333333333334,	2100	,10},
	{48.1833333333335,	2100	,10},
	{48.5216666666668,	1960	,10},
	{48.8308333333335,	1750	,10},
	{49.1050000000001,	1540	,10},
	{49.3441666666668,	1330	,10},
	{49.5483333333335,	1120	,10},
	{49.7175000000001,	910	,10},
	{49.8516666666668,	700	,10},
	{49.9508333333335,	490	,10},
	{50.0150000000001,	280	,10},
	{50.0441666666668,	70	,10},
	{50.0500000000001,	9.71445E-14	,10},
	{50.0500000000001,	0	,10}};

	const int kMotionProfileSzRight =156;

	const double kMotionProfileRight[156][3] = {
	{0,	0	,10},
	{-0.0116666666666667,	-140	,10},
	{-0.0525,	-350	,10},
	{-0.128333333333333,	-560	,10},
	{-0.239166666666667,	-770	,10},
	{-0.385,	-980	,10},
	{-0.565833333333333,	-1190	,10},
	{-0.781666666666667,	-1400	,10},
	{-1.0325,	-1610	,10},
	{-1.31833333333333,	-1820	,10},
	{-1.63916666666667,	-2030	,10},
	{-1.98333333333333,	-2100	,10},
	{-2.33333333333333,	-2100	,10},
	{-2.68333333333333,	-2100	,10},
	{-3.03333333333333,	-2100	,10},
	{-3.38333333333333,	-2100	,10},
	{-3.73333333333333,	-2100	,10},
	{-4.08333333333333,	-2100	,10},
	{-4.43333333333333,	-2100	,10},
	{-4.78333333333333,	-2100	,10},
	{-5.13333333333333,	-2100	,10},
	{-5.48333333333333,	-2100	,10},
	{-5.83333333333333,	-2100	,10},
	{-6.18333333333333,	-2100	,10},
	{-6.53333333333333,	-2100	,10},
	{-6.88333333333333,	-2100	,10},
	{-7.23333333333333,	-2100	,10},
	{-7.58333333333333,	-2100	,10},
	{-7.93333333333333,	-2100	,10},
	{-8.28333333333333,	-2100	,10},
	{-8.63333333333333,	-2100	,10},
	{-8.98333333333333,	-2100	,10},
	{-9.33333333333333,	-2100	,10},
	{-9.68333333333333,	-2100	,10},
	{-10.0333333333333,	-2100	,10},
	{-10.3833333333333,	-2100	,10},
	{-10.7333333333333,	-2100	,10},
	{-11.0833333333333,	-2100	,10},
	{-11.4333333333333,	-2100	,10},
	{-11.7833333333333,	-2100	,10},
	{-12.1333333333333,	-2100	,10},
	{-12.4833333333333,	-2100	,10},
	{-12.8333333333333,	-2100	,10},
	{-13.1833333333333,	-2100	,10},
	{-13.5333333333333,	-2100	,10},
	{-13.8833333333333,	-2100	,10},
	{-14.2333333333333,	-2100	,10},
	{-14.5833333333333,	-2100	,10},
	{-14.9333333333333,	-2100	,10},
	{-15.2833333333333,	-2100	,10},
	{-15.6333333333333,	-2100	,10},
	{-15.9833333333333,	-2100	,10},
	{-16.3333333333333,	-2100	,10},
	{-16.6833333333333,	-2100	,10},
	{-17.0333333333333,	-2100	,10},
	{-17.3833333333333,	-2100	,10},
	{-17.7333333333333,	-2100	,10},
	{-18.0833333333333,	-2100	,10},
	{-18.4333333333333,	-2100	,10},
	{-18.7833333333333,	-2100	,10},
	{-19.1333333333333,	-2100	,10},
	{-19.4833333333333,	-2100	,10},
	{-19.8333333333333,	-2100	,10},
	{-20.1833333333333,	-2100	,10},
	{-20.5333333333333,	-2100	,10},
	{-20.8833333333333,	-2100	,10},
	{-21.2333333333333,	-2100	,10},
	{-21.5833333333333,	-2100	,10},
	{-21.9333333333333,	-2100	,10},
	{-22.2833333333333,	-2100	,10},
	{-22.6333333333333,	-2100	,10},
	{-22.9833333333333,	-2100	,10},
	{-23.3333333333333,	-2100	,10},
	{-23.6833333333334,	-2100	,10},
	{-24.0333333333334,	-2100	,10},
	{-24.3833333333334,	-2100	,10},
	{-24.7333333333334,	-2100	,10},
	{-25.0833333333334,	-2100	,10},
	{-25.4333333333334,	-2100	,10},
	{-25.7833333333334,	-2100	,10},
	{-26.1333333333334,	-2100	,10},
	{-26.4833333333334,	-2100	,10},
	{-26.8333333333334,	-2100	,10},
	{-27.1833333333334,	-2100	,10},
	{-27.5333333333334,	-2100	,10},
	{-27.8833333333334,	-2100	,10},
	{-28.2333333333334,	-2100	,10},
	{-28.5833333333334,	-2100	,10},
	{-28.9333333333334,	-2100	,10},
	{-29.2833333333334,	-2100	,10},
	{-29.6333333333334,	-2100	,10},
	{-29.9833333333334,	-2100	,10},
	{-30.3333333333334,	-2100	,10},
	{-30.6833333333334,	-2100	,10},
	{-31.0333333333334,	-2100	,10},
	{-31.3833333333334,	-2100	,10},
	{-31.7333333333334,	-2100	,10},
	{-32.0833333333334,	-2100	,10},
	{-32.4333333333334,	-2100	,10},
	{-32.7833333333334,	-2100	,10},
	{-33.1333333333334,	-2100	,10},
	{-33.4833333333334,	-2100	,10},
	{-33.8333333333334,	-2100	,10},
	{-34.1833333333334,	-2100	,10},
	{-34.5333333333334,	-2100	,10},
	{-34.8833333333334,	-2100	,10},
	{-35.2333333333334,	-2100	,10},
	{-35.5833333333334,	-2100	,10},
	{-35.9333333333334,	-2100	,10},
	{-36.2833333333334,	-2100	,10},
	{-36.6333333333334,	-2100	,10},
	{-36.9833333333334,	-2100	,10},
	{-37.3333333333334,	-2100	,10},
	{-37.6833333333334,	-2100	,10},
	{-38.0333333333334,	-2100	,10},
	{-38.3833333333334,	-2100	,10},
	{-38.7333333333334,	-2100	,10},
	{-39.0833333333334,	-2100	,10},
	{-39.4333333333334,	-2100	,10},
	{-39.7833333333334,	-2100	,10},
	{-40.1333333333334,	-2100	,10},
	{-40.4833333333334,	-2100	,10},
	{-40.8333333333334,	-2100	,10},
	{-41.1833333333334,	-2100	,10},
	{-41.5333333333334,	-2100	,10},
	{-41.8833333333334,	-2100	,10},
	{-42.2333333333334,	-2100	,10},
	{-42.5833333333334,	-2100	,10},
	{-42.9333333333334,	-2100	,10},
	{-43.2833333333334,	-2100	,10},
	{-43.6333333333334,	-2100	,10},
	{-43.9833333333334,	-2100	,10},
	{-44.3333333333334,	-2100	,10},
	{-44.6833333333334,	-2100	,10},
	{-45.0333333333334,	-2100	,10},
	{-45.3833333333334,	-2100	,10},
	{-45.7333333333334,	-2100	,10},
	{-46.0833333333334,	-2100	,10},
	{-46.4333333333334,	-2100	,10},
	{-46.7833333333334,	-2100	,10},
	{-47.1333333333334,	-2100	,10},
	{-47.4833333333334,	-2100	,10},
	{-47.8333333333334,	-2100	,10},
	{-48.1833333333335,	-2100	,10},
	{-48.5216666666668,	-1960	,10},
	{-48.8308333333335,	-1750	,10},
	{-49.1050000000001,	-1540	,10},
	{-49.3441666666668,	-1330	,10},
	{-49.5483333333335,	-1120	,10},
	{-49.7175000000001,	-910	,10},
	{-49.8516666666668,	-700	,10},
	{-49.9508333333335,	-490	,10},
	{-50.0150000000001,	-280	,10},
	{-50.0441666666668,	-70	,10},
	{-50.0500000000001,	-9.71445E-14	,10},
	{-50.0500000000001,	0	,10}};



	vector<vector <double> *> *getVectorFromLeftProfile() {
		vector<vector <double> *> *retVal = new vector<vector <double> *> ();
		for (int i = 0; i < kMotionProfileSzLeft; i++) {
			retVal->push_back(new vector<double>({kMotionProfileLeft[i][0], kMotionProfileLeft[i][1], kMotionProfileLeft[i][2]}));
		}
		return retVal;
	}

	vector<vector <double> *> *getVectorFromRightProfile() {
		vector<vector <double> *> *retVal = new vector<vector <double> *> ();
		for (int i = 0; i < kMotionProfileSzRight; i++) {
			retVal->push_back(new vector<double>({kMotionProfileRight[i][0], kMotionProfileRight[i][1], kMotionProfileRight[i][2]}));
		}
		return retVal;
	}
};

#endif /* SRC_AUTONOMOUS_AUTOHOPPERRED_H_ */
